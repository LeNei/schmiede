use crate::common::{
    context::ApiContext,
    models::{New{{ struct_name }}, {{ struct_name }}, Update{{ struct_name}}},
    response::ErrorResponse,
};
use axum::{
    extract::{Path, State},
    routing::get,
    Json, Router,
};
use hyper::StatusCode;

pub async fn get_{{ name|lower }}s(State(ctx): State<ApiContext>) -> Result<Json<Vec<{{ struct_name }}>>, ErrorResponse> {
    use crate::schema::{{ name|lower }}::dsl::*;
    use diesel_async::RunQueryDsl;

    let mut conn = ctx.get_db_connection().await?;

    let {{ name|lower }}s: Vec<{{ struct_name }}> = {{ name|lower }}.load(&mut conn).await.map_err(ErrorResponse::from)?;

    Ok(Json({{ name|lower }}s))
}

async fn get_{{ name|lower }}(
    State(ctx): State<ApiContext>,
    Path({{ name|lower }}_id): Path<i32>,
) -> Result<Json<{{ struct_name }}>, ErrorResponse> {
    use crate::schema::{{ name|lower }}::dsl::*;
    use diesel::prelude::*;
    use diesel_async::RunQueryDsl;

    let mut conn = ctx.get_db_connection().await?;

    let found_{{ name|lower }} = {{ name|lower }}
        .find({{ name|lower }}_id)
        .first(&mut conn)
        .await
        .map_err(ErrorResponse::from)?;

    Ok(Json(found_{{ name|lower }}))
}

async fn new_{{ name|lower }}(
    State(ctx): State<ApiContext>,
    Json(body): Json<New{{ struct_name }}>,
) -> Result<(StatusCode, Json<{{ struct_name }}>), ErrorResponse> {
    use crate::schema::{{ name|lower }}::dsl::*;
    use diesel::prelude::*;
    use diesel_async::RunQueryDsl;

    let mut conn = ctx.get_db_connection().await?;

    let new_{{ name|lower }} = diesel::insert_into({{ name|lower }})
        .values(body)
        .returning({{ struct_name }}::as_returning())
        .get_result(&mut conn)
        .await
        .map_err(ErrorResponse::from)?;

    Ok((StatusCode::CREATED, Json(new_{{ name|lower }})))
}

async fn update_post(
    State(ctx): State<ApiContext>,
    Path({{ name|lower }}_id): Path<i32>,
    Json(body): Json<Update{{ struct_name }}>,
) -> Result<Json<{{ struct_name }}>, ErrorResponse> {
    use crate::schema::{{ name|lower }}::dsl::*;
    use diesel::prelude::*;
    use diesel_async::RunQueryDsl;

    let mut conn = ctx.get_db_connection().await?;

    let updated_{{ name|lower }} = diesel::update({{ name|lower }}.find({{ name|lower }}_id))
        .set(body)
        .returning({{ struct_name }}::as_returning())
        .get_result(&mut conn)
        .await
        .map_err(ErrorResponse::from)?;

    Ok(Json(updated_{{ name|lower }}))
}

async fn delete_post(
    State(ctx): State<ApiContext>,
    Path({{ name|lower }}_id): Path<i32>,
) -> Result<StatusCode, ErrorResponse> {
    use crate::schema::{{ name|lower }}::dsl::*;
    use diesel::prelude::*;
    use diesel_async::RunQueryDsl;

    let mut conn = ctx.get_db_connection().await?;

    diesel::delete({{ name|lower }}.find(post_id))
        .execute(&mut conn)
        .await
        .map_err(ErrorResponse::from)?;

    Ok(StatusCode::ACCEPTED)
}

pub fn routes() -> Router<ApiContext> {
    Router::new()
        .route("/", get(get_{{ name|lower }}s).post(new_{{ name|lower }}))
        .route(
            "/:{{ name|lower }}_id",
            get(get_{{ name|lower }}).patch(update_{{ name|lower }}).delete(delete_{{ name|lower }}),
        )
}
