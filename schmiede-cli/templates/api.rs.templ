use axum::{
    extract::{State, Path},
    routing::{post, get, put, delete},
    Json,
    Router,
};
use super::ApiContext;
use chrono::{DateTime, Utc};
use hyper::StatusCode;
use serde::{Deserialize, Serialize};
use sqlx::FromRow;
use crate::helpers::response::ErrorResponse; 


#[derive(Debug, Serialize, FromRow)]
#[serde(rename_all = "camelCase")]
struct {{ struct_name }} {
    {%- if has_id %}
    id: i32,
    {%- endif %}
    {%- for row in rows %}
    {{ row }},
    {%- endfor %}
    created_at: DateTime<Utc>,
    updated_at: DateTime<Utc>,
}

#[derive(Debug, Deserialize)]
#[serde(rename_all = "camelCase")]
struct New{{ struct_name }} {
    {%- for row in rows %}
    {{ row }},
    {%- endfor %}
}

#[tracing::instrument(name = "Add new {{ struct_name }}", skip(data))]
async fn new_{{ function_name }}(
    State(data): State<ApiContext>,
    Json(body): Json<New{{ struct_name }}>,
) -> Result<(StatusCode, Json<{{ struct_name }}>), ErrorResponse> {
    //Add code to insert new {{ struct_name }} here
    todo!()
}

#[tracing::instrument(name = "Get {{ struct_name }}", skip(data))]
async fn get_{{ function_name }}(
    State(data): State<ApiContext>,
    Path(id): Path<i32>,
) -> Result<(StatusCode, Json<{{ struct_name }}>), ErrorResponse> {
    //Add code to get {{ struct_name }} here
    todo!()
}


#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
struct Update{{ struct_name }} {
    {%- for row in edit_rows %}
    {{ row }},
    {%- endfor %}
}

#[tracing::instrument(name = "Update {{ struct_name }}", skip(data))]
async fn update_{{ function_name }}(
    State(data): State<ApiContext>,
    Path(id): Path<i32>,
    Json(body): Json<Update{{ struct_name }}>,
) -> Result<(StatusCode, Json<{{ struct_name }}>), ErrorResponse> {
    //Add code to update {{ struct_name }} here
    todo!()
}

#[tracing::instrument(name = "Update {{ struct_name }}", skip(data))]
async fn delete_{{ function_name }}(
    State(data): State<ApiContext>,
    Path(id): Path<i32>,
) -> Result<StatusCode, ErrorResponse> {
    //Add code to delete {{ struct_name }} here
    todo!()
}

pub fn routes() -> Router<ApiContext> {
    Router::new()
        .route("/{{ function_name }}", post(new_{{ function_name }}))
        .route("/{{ function_name }}/:{{ function_name }}_id", get(get_{{ function_name }}))
        .route("/{{ function_name }}/:{{ function_name }}_id", put(update_{{ function_name }}))
        .route("/{{ function_name }}/:{{ function_name }}_id", delete(delete_{{ function_name }}))
}
